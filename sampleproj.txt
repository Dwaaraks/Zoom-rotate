// Employee.java - Model class for Employee
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "employees")
public class Employee {

    @Id
    private String id;
    private String name;
    private String department;

    // Getters and setters
}

// EmployeeRepository.java - Repository interface for Employee CRUD operations
import org.springframework.data.mongodb.repository.MongoRepository;

public interface EmployeeRepository extends MongoRepository<Employee, String> {
}

// EmployeeService.java - Service class for Employee CRUD operations
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(String id) {
        return employeeRepository.findById(id);
    }

    public Employee createEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(String id) {
        employeeRepository.deleteById(id);
    }

    public Employee updateEmployee(String id, Employee employee) {
        if (employeeRepository.existsById(id)) {
            employee.setId(id);
            return employeeRepository.save(employee);
        }
        return null;
    }
}

// EmployeeController.java - Controller class for handling HTTP requests
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable("id") String id) {
        Optional<Employee> employee = employeeService.getEmployeeById(id);
        return employee.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
        Employee createdEmployee = employeeService.createEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdEmployee);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable("id") String id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable("id") String id, @RequestBody Employee employee) {
        Employee updatedEmployee = employeeService.updateEmployee(id, employee);
        if (updatedEmployee != null) {
            return ResponseEntity.ok(updatedEmployee);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}


// employee.model.ts - Model class for Employee in Angular
export class Employee {
    id: string;
    name: string;
    department: string;
}

// employee.service.ts - Service class for handling HTTP requests in Angular
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee.model';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private apiUrl = '/api/employees';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  getEmployeeById(id: string): Observable<Employee> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`);
  }

  createEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }

  updateEmployee(id: string, employee: Employee): Observable<Employee> {
    return this.http.put<Employee>(`${this.apiUrl}/${id}`, employee);
  }

  deleteEmployee(id: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}

// employee.component.ts - Component class for managing employee data in Angular
import { Component, OnInit } from '@angular/core';
import { Employee } from './employee.model';
import { EmployeeService } from './employee.service';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css']
})
export class EmployeeComponent implements OnInit {

  employees: Employee[] = [];
  selectedEmployee: Employee = new Employee();
  isNewEmployee: boolean = true;

  constructor(private employeeService: EmployeeService) { }

  ngOnInit(): void {
    this.getEmployees();
  }

  getEmployees(): void {
    this.employeeService.getEmployees()
      .subscribe(employees => this.employees = employees);
  }

  onSelect(employee: Employee): void {
    this.selectedEmployee = { ...employee };
    this.isNewEmployee = false;
  }

  saveEmployee(): void {
    if (this.isNewEmployee) {
      this.employeeService.createEmployee(this.selectedEmployee)
        .subscribe(() => {
          this.getEmployees();
          this.selectedEmployee = new Employee();
        });
    } else {
      this.employeeService.updateEmployee(this.selectedEmployee.id, this.selectedEmployee)
        .subscribe(() => {
          this.getEmployees();
          this.selectedEmployee = new Employee();
          this.isNewEmployee = true;
        });
    }
  }

  deleteEmployee(id: string): void {
    this.employeeService.deleteEmployee(id)
      .subscribe(() => {
        this.getEmployees();
        this.selectedEmployee = new Employee();
        this.isNewEmployee = true;
      });
  }

  cancelEdit(): void {
    this.selectedEmployee = new Employee();
    this.isNewEmployee = true;
  }
}

<!-- employee.component.html - Template for managing employee data in Angular -->
<div>
  <ul>
    <li *ngFor="let employee of employees" (click)="onSelect(employee)">
      {{ employee.name }}
    </li>
  </ul>
  <div *ngIf="selectedEmployee.id">
    <label>Name:</label>
    <input [(ngModel)]="selectedEmployee.name" name="name">
    <label>Department:</label>
    <input [(ngModel)]="selectedEmployee.department" name="department">
    <button (click)="saveEmployee()">Save</button>
    <button (click)="deleteEmployee(selectedEmployee.id)">Delete</button>
    <button (click)="cancelEdit()">Cancel</button>
  </div>
</div>



public class Employee {

    private String id;
    private String name;
    private String department;

    // Getter methods
    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getDepartment() {
        return department;
    }

    // Setter methods
    public void setId(String id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setDepartment(String department) {
        this.department = department;
    }
}
