// Employee.java - Model class for Employee
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "employees")
public class Employee {

    @Id
    private String id;
    private String name;
    private String department;

    // Getters and setters
}

// EmployeeRepository.java - Repository interface for Employee CRUD operations
import org.springframework.data.mongodb.repository.MongoRepository;

public interface EmployeeRepository extends MongoRepository<Employee, String> {
}

// EmployeeService.java - Service class for Employee CRUD operations
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(String id) {
        return employeeRepository.findById(id);
    }

    public Employee createEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(String id) {
        employeeRepository.deleteById(id);
    }

    public Employee updateEmployee(String id, Employee employee) {
        if (employeeRepository.existsById(id)) {
            employee.setId(id);
            return employeeRepository.save(employee);
        }
        return null;
    }
}

// EmployeeController.java - Controller class for handling HTTP requests
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable("id") String id) {
        Optional<Employee> employee = employeeService.getEmployeeById(id);
        return employee.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
        Employee createdEmployee = employeeService.createEmployee(employee);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdEmployee);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable("id") String id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable("id") String id, @RequestBody Employee employee) {
        Employee updatedEmployee = employeeService.updateEmployee(id, employee);
        if (updatedEmployee != null) {
            return ResponseEntity.ok(updatedEmployee);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}


// employee.model.ts - Model class for Employee in Angular
export class Employee {
    id: string;
    name: string;
    department: string;
}

// employee.service.ts - Service class for handling HTTP requests in Angular
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee.model';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private apiUrl = '/api/employees';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  getEmployeeById(id: string): Observable<Employee> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`);
  }

  createEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }

  updateEmployee(id: string, employee: Employee): Observable<Employee> {
    return this.http.put<Employee>(`${this.apiUrl}/${id}`, employee);
  }

  deleteEmployee(id: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}

// employee.component.ts - Component class for managing employee data in Angular
import { Component, OnInit } from '@angular/core';
import { Employee } from './employee.model';
import { EmployeeService } from './employee.service';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css']
})
export class EmployeeComponent implements OnInit {

  employees: Employee[] = [];
  selectedEmployee: Employee = new Employee();
  isNewEmployee: boolean = true;

  constructor(private employeeService: EmployeeService) { }

  ngOnInit(): void {
    this.getEmployees();
  }

  getEmployees(): void {
    this.employeeService.getEmployees()
      .subscribe(employees => this.employees = employees);
  }

  onSelect(employee: Employee): void {
    this.selectedEmployee = { ...employee };
    this.isNewEmployee = false;
  }

  saveEmployee(): void {
    if (this.isNewEmployee) {
      this.employeeService.createEmployee(this.selectedEmployee)
        .subscribe(() => {
          this.getEmployees();
          this.selectedEmployee = new Employee();
        });
    } else {
      this.employeeService.updateEmployee(this.selectedEmployee.id, this.selectedEmployee)
        .subscribe(() => {
          this.getEmployees();
          this.selectedEmployee = new Employee();
          this.isNewEmployee = true;
        });
    }
  }

  deleteEmployee(id: string): void {
    this.employeeService.deleteEmployee(id)
      .subscribe(() => {
        this.getEmployees();
        this.selectedEmployee = new Employee();
        this.isNewEmployee = true;
      });
  }

  cancelEdit(): void {
    this.selectedEmployee = new Employee();
    this.isNewEmployee = true;
  }
}

<!-- employee.component.html - Template for managing employee data in Angular -->
<div>
  <!-- Form for adding new employee -->
  <form *ngIf="isNewEmployee" (ngSubmit)="saveEmployee()">
    <label>Name:</label>
    <input [(ngModel)]="selectedEmployee.name" name="name">
    <label>Department:</label>
    <input [(ngModel)]="selectedEmployee.department" name="department">
    <!-- Add fields for other employee details -->
    <button type="submit">Submit</button>
  </form>

  <!-- Form for editing existing employee -->
  <form *ngIf="!isNewEmployee" (ngSubmit)="saveEmployee()">
    <label>Name:</label>
    <input [(ngModel)]="selectedEmployee.name" name="name">
    <label>Department:</label>
    <input [(ngModel)]="selectedEmployee.department" name="department">
    <!-- Add fields for other employee details -->
    <button type="submit">Save</button>
    <button type="button" (click)="cancelEdit()">Cancel</button>
  </form>
</div>

<div>
  <!-- List of employees with edit and delete buttons -->
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Department</th>
        <!-- Add headers for other employee details -->
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <!-- Display other employee details -->
        <td>
          <button (click)="onSelect(employee)">Edit</button>
          <button (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>



import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public ResponseEntity<List<Employee>> getEmployees(@RequestHeader("Authorization") String authToken,
                                                       @RequestHeader("Custom-Header") String customHeader) {
        // Here you can handle the authorization token and custom headers if needed
        List<Employee> employees = employeeService.getAllEmployees();
        return new ResponseEntity<>(employees, HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee,
                                                   @RequestHeader("Authorization") String authToken,
                                                   @RequestHeader("Custom-Header") String customHeader) {
        // Here you can handle the authorization token and custom headers if needed
        Employee createdEmployee = employeeService.createEmployee(employee);
        return new ResponseEntity<>(createdEmployee, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable("id") String id,
                                                   @RequestBody Employee employee,
                                                   @RequestHeader("Authorization") String authToken,
                                                   @RequestHeader("Custom-Header") String customHeader) {
        // Here you can handle the authorization token and custom headers if needed
        Employee updatedEmployee = employeeService.updateEmployee(id, employee);
        return new ResponseEntity<>(updatedEmployee, HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable("id") String id,
                                                @RequestHeader("Authorization") String authToken,
                                                @RequestHeader("Custom-Header") String customHeader) {
        // Here you can handle the authorization token and custom headers if needed
        employeeService.deleteEmployee(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    // Other controller methods...
}




css
/* employee.component.css - CSS for employee component */

.employee-form {
  width: 50%;
  margin: auto;
}

.form-group {
  margin-bottom: 1rem;
}

label {
  display: block;
  font-weight: bold;
}

input[type="text"], input[type="date"] {
  width: 100%;
  padding: 0.5rem;
  font-size: 1rem;
}

button {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
}

button[type="submit"] {
  background-color: #007bff;
  color: #fff;
  border: none;
}

button[type="submit"]:hover {
  background-color: #0056b3;
}

button[type="button"] {
  background-color: #dc3545;
  color: #fff;
  border: none;
}

button[type="button"]:hover {
  background-color: #c82333;
}



html updated

<!-- employee.component.html - Template for managing employee data in Angular -->
<div>
  <!-- Form for adding new employee -->
  <form *ngIf="isNewEmployee" (ngSubmit)="saveEmployee()">
    <table>
      <tr>
        <td><label>Kid:</label></td>
        <td><input [(ngModel)]="selectedEmployee.kid" name="kid"></td>
        <td><label>Name:</label></td>
        <td><input [(ngModel)]="selectedEmployee.name" name="name"></td>
      </tr>
      <tr>
        <td><label>Address:</label></td>
        <td><input [(ngModel)]="selectedEmployee.address" name="address"></td>
        <td><label>Employee ID:</label></td>
        <td><input [(ngModel)]="selectedEmployee.employeeId" name="employeeId"></td>
      </tr>
      <tr>
        <td><label>Phone Number:</label></td>
        <td><input [(ngModel)]="selectedEmployee.phno" name="phno"></td>
        <td><label>Date of Joining:</label></td>
        <td><input type="date" [(ngModel)]="selectedEmployee.dateOfJoining" name="dateOfJoining"></td>
      </tr>
      <tr>
        <td><label>LOB:</label></td>
        <td><input [(ngModel)]="selectedEmployee.lob" name="lob"></td>
        <td></td>
        <td><button type="submit">Submit</button></td>
      </tr>
    </table>
  </form>

  <!-- List of employees with edit and delete buttons -->
  <table>
    <thead>
      <tr>
        <th>Kid</th>
        <th>Name</th>
        <th>Address</th>
        <th>Employee ID</th>
        <th>Phone Number</th>
        <th>Date of Joining</th>
        <th>LOB</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.kid }}</td>
        <td>{{ employee.name }}</td>
        <td>{{ employee.address }}</td>
        <td>{{ employee.employeeId }}</td>
        <td>{{ employee.phno }}</td>
        <td>{{ employee.dateOfJoining }}</td>
        <td>{{ employee.lob }}</td>
        <td>
          <button (click)="onSelect(employee)">Edit</button>
          <button (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>



<!-- Form for adding new employee -->
<form *ngIf="isNewEmployee" (ngSubmit)="saveEmployee()">
  <table>
    <tr>
      <td><label>Kid:</label></td>
      <td><input [(ngModel)]="selectedEmployee.kid" name="kid"></td>
      <td><label>Name:</label></td>
      <td><input [(ngModel)]="selectedEmployee.name" name="name"></td>
    </tr>
    <tr>
      <td><label>Address:</label></td>
      <td><input [(ngModel)]="selectedEmployee.address" name="address"></td>
      <td><label>Employee ID:</label></td>
      <td><input [(ngModel)]="selectedEmployee.employeeId" name="employeeId"></td>
    </tr>
    <tr>
      <td><label>Phone Number:</label></td>
      <td><input [(ngModel)]="selectedEmployee.phno" name="phno"></td>
      <td><label>Date of Joining:</label></td>
      <td><input type="date" [(ngModel)]="selectedEmployee.dateOfJoining" name="dateOfJoining"></td>
    </tr>
    <tr>
      <td><label>LOB:</label></td>
      <td><input [(ngModel)]="selectedEmployee.lob" name="lob"></td>
      <td></td>
      <td><button type="submit">Submit</button></td>
    </tr>
  </table>
</form>





<!-- employee.component.html - Template for managing employee data in Angular -->
<div>
  <!-- Form for adding new employee -->
  <form *ngIf="isNewEmployee" (ngSubmit)="saveEmployee()" class="employee-form">
    <h2>Add New Employee</h2>
    <div class="form-group">
      <label for="kid">Kid:</label>
      <input type="text" [(ngModel)]="selectedEmployee.kid" name="kid" id="kid" required>
    </div>
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" [(ngModel)]="selectedEmployee.name" name="name" id="name" required>
    </div>
    <!-- Include other input fields for address, employee ID, phone number, date of joining, and LOB -->
    <button type="submit">Submit</button>
  </form>

  <!-- Form for editing existing employee -->
  <form *ngIf="!isNewEmployee" (ngSubmit)="saveEmployee()" class="employee-form">
    <h2>Edit Employee</h2>
    <div class="form-group">
      <label for="kid">Kid:</label>
      <input type="text" [(ngModel)]="selectedEmployee.kid" name="kid" id="kid" required>
    </div>
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" [(ngModel)]="selectedEmployee.name" name="name" id="name" required>
    </div>
    <!-- Include other input fields for address, employee ID, phone number, date of joining, and LOB -->
    <button type="submit">Save</button>
    <button type="button" (click)="cancelEdit()">Cancel</button>
  </form>

  <!-- List of employees with edit and delete buttons -->
  <h2>Employee List</h2>
  <!-- Include the table to display the list of employees -->
</div>

